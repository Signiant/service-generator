const request = require('request-promise');
const auth = require('../../../config/auth.json').bitbucket;
const config = require('../../../config/bbconfig.json');
const branchPermissions = require('./branch_permissions');
const reviewers = require('./reviewers');
const headers = require('./headers');

const team = config.team;
console.log(`BB Team: ${team}`);

const reviewersGroup = config.reviewerGroup
console.log(`Reviewers Group: ${reviewersGroup}`);

const getToken = async (key, secret) => {
  // console.log(`getToken() called with key=${key}, secret=${secret}`);
  const bitbucketOauthTokenEndpoint = 'https://bitbucket.org/site/oauth2/access_token';
  const auth = "Basic " + new Buffer(key + ":" + secret).toString("base64");

  const options = {
      url: bitbucketOauthTokenEndpoint,
      headers: {'Authorization': auth},
      method: 'POST',
      form: {'grant_type': 'client_credentials'}
  };

  const getTokenResponse = await request.post(options);
  // console.log('Body: ', getTokenResponse);
  const getTokenJson = JSON.parse(getTokenResponse);
  // console.log('get token json: ', getTokenJson);
  const token = getTokenJson.access_token;
  return token;
};

const createRepo = async (restUrl, token, name, slug) => {

  const createRepoOptions = {
    json: true,
    headers: headers(token),
    body: {
      scm: 'git',
      name: name,
      slug: slug,
      description: `${name} - Generated by Service Generator`,
      language: 'nodejs',
      is_private: true,
      project: {key: 'MIC'}
    }
  };

  console.log("creating new repo");
  // Create Repo
  const uris = {};
  try{
    const createRepoResponse = await request.post(restUrl, createRepoOptions);
    // console.log('create repo response: ', createRepoResponse);
    uris.web = createRepoResponse.links.html.href;
    let uriObj = createRepoResponse.links.clone.find(obj => obj.name == "ssh");
    uris.git = uriObj.href;
  } catch (err) {
    // console.log("Error creating repo", err);
    return new error('Creating Repo', err.message);
  }
  // console.log('URIs: ', uris);
  return uris;
};

const setup = async (name, done) => {

  let host = auth.baseUrl;
  if (host.substr(-1) != '/') host += '/';

  const token = await getToken(auth.key, auth.secret);

  // Replace underscores with dashes and lower case everything
  const repoSlug = name.replace(/[_\s+]/g, '-').toLowerCase();

  const repoRestUrl = `${host}2.0/repositories/${team}/${repoSlug}`;

  console.log(`creating new repo with name: ${name}`);
  console.log(`repo slug will be: ${repoSlug}`);

  const uris = await createRepo(repoRestUrl, token, name, repoSlug);

  // Set branch permissions/restrictions
  await branchPermissions(repoRestUrl, token);

  // add default reviewers
  // default reviewers are broken due to the Bitbucket API being deprecated for groups.  Commenting out for now.
  // await reviewers(host, repoRestUrl, token, team, reviewersGroup)


  done(null, uris);
};

module.exports = setup;
